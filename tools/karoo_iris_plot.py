# Karoo GP Iris Plot
# Plot a function generated by Karoo GP against a scatter of the Iris data
# by Kai Staats, MSc UCT / AIMS and Arun Kumar, PhD

# See https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ for a good plotting tutorial

import numpy as np
import matplotlib.pyplot as mpl
from mpl_toolkits.mplot3d import Axes3D

# data = np.loadtxt('../files/Iris_dataset/data_IRIS_setosa-vs-versicolor_3-col_PLOT.csv', delimiter=',', dtype = str)
# data = np.loadtxt('../files/Iris_dataset/data_IRIS_versicolor-vs-virginica_3-col_PLOT.csv', delimiter=',', dtype = str)
data = np.loadtxt('../files/Iris_dataset/data_IRIS_virginica-vs-setosa_3-col_PLOT.csv', delimiter=',', dtype = str)

# http://stn.spotfire.com/spotfire_client_help/norm/norm_normalizing_columns.htm
# to scale between 0 and 1: n - min(list) / (max(list) - min(list))

### PLOT THE DATA ###
def fx_normalize(array):

	norm = []
	array_min = np.min(array)
	array_max = np.max(array)
	
	for col in range(1, len(array) + 1):
		n = float((array[col - 1] - array_min) / (array_max - array_min))			
		norm = np.append(norm, n)
		
	return norm
	

data_a, data_b, data_c = [], [], []

tmp = data[:,0] 
for n in range(len(tmp)):
	data_a.append(float(tmp[n]))
	
tmp = data[:,1] 
for n in range(len(tmp)):
	data_b.append(float(tmp[n]))
	
tmp = data[:,2] 
for n in range(len(tmp)):
	data_c.append(float(tmp[n]))

# normalise the data
# data_a = fx_normalize(data_a)
# data_b = fx_normalize(data_b)
# data_c = fx_normalize(data_c)

fig = mpl.figure()
ax = fig.add_subplot(111, projection = '3d')

ax.scatter(data_a, data_b, data_c, c = 'r', marker = 'o')


### PLOT THE FUNCTION ###
b = np.arange(2, 4, 0.25)
c = np.arange(2, 4, 0.25)
b, c = np.meshgrid(b, c)

# -b*c + c**2 + c - 1 --> ?
# -a/c - b**2 + c**2 --> ?
# -a - b + c**2 --> a = -b + c**2
a = -b + c**2

# normalise the function
# a = fx_normalize(a)
# b = fx_normalize(b)
# c = fx_normalize(c)

ax.plot_wireframe(a,b,c)

ax.set_xlabel('a')
ax.set_ylabel('b')
ax.set_zlabel('c')

mpl.show()

